// Script de verifica√ß√£o de pr√©-deploy para o Vercel
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Configura√ß√£o para cores no console
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m'
};

// Obter o diret√≥rio atual do m√≥dulo
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Fun√ß√£o auxiliar para logs coloridos
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

// Fun√ß√£o para verificar e relatar conflitos potenciais
function checkForConflicts(directory) {
  const conflictPatterns = [
    { base: 'index', extensions: ['.js', '.mjs', '.ts', '.tsx', '.jsx'] },
    { base: 'main', extensions: ['.js', '.mjs', '.ts', '.tsx', '.jsx'] },
    { base: 'app', extensions: ['.js', '.mjs', '.ts', '.tsx', '.jsx'] }
  ];
  
  let conflicts = [];
  
  conflictPatterns.forEach(pattern => {
    let matchingFiles = [];
    
    pattern.extensions.forEach(ext => {
      const filePath = path.join(directory, pattern.base + ext);
      if (fs.existsSync(filePath)) {
        matchingFiles.push(filePath);
      }
    });
    
    if (matchingFiles.length > 1) {
      conflicts.push({
        base: pattern.base,
        files: matchingFiles
      });
    }
  });
  
  return conflicts;
}

log('üîç Verificando setup para deploy no Vercel...', colors.bold);

// Verificar estrutura de diret√≥rios
log('\n1. Verificando estrutura de diret√≥rios:', colors.cyan);

const requiredDirs = ['src', 'api'];
const requiredFiles = ['index.html', 'vercel.json', 'vite.config.ts'];

let allRequirementsMet = true;

// Verificar diret√≥rios
requiredDirs.forEach(dir => {
  if (fs.existsSync(dir) && fs.statSync(dir).isDirectory()) {
    log(`  ‚úÖ Diret√≥rio ${dir} encontrado`, colors.green);
  } else {
    log(`  ‚ùå Diret√≥rio ${dir} n√£o encontrado`, colors.red);
    allRequirementsMet = false;
  }
});

// Verificar arquivos
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    log(`  ‚úÖ Arquivo ${file} encontrado`, colors.green);
  } else {
    log(`  ‚ùå Arquivo ${file} n√£o encontrado`, colors.red);
    allRequirementsMet = false;
  }
});

// Verificar configura√ß√£o de build
log('\n2. Verificando configura√ß√£o de build:', colors.cyan);

const packageJsonPath = path.join(__dirname, 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  if (packageJson.scripts && packageJson.scripts.build) {
    log(`  ‚úÖ Script de build encontrado: "${packageJson.scripts.build}"`, colors.green);
  } else {
    log(`  ‚ùå Script de build n√£o encontrado no package.json`, colors.red);
    allRequirementsMet = false;
  }
  
  // Verificar depend√™ncias
  const hasDeps = (packageJson.dependencies && (
    packageJson.dependencies.vite || 
    packageJson.dependencies.react
  )) || (packageJson.devDependencies && (
    packageJson.devDependencies.vite || 
    packageJson.devDependencies.react
  ));
  
  if (hasDeps) {
    log(`  ‚úÖ Depend√™ncias React/Vite encontradas`, colors.green);
  } else {
    log(`  ‚ö†Ô∏è Poss√≠veis depend√™ncias ausentes (React/Vite)`, colors.yellow);
  }
} else {
  log(`  ‚ùå Arquivo package.json n√£o encontrado`, colors.red);
  allRequirementsMet = false;
}

// Verificar vercel.json
log('\n3. Verificando configura√ß√£o do Vercel:', colors.cyan);

const vercelJsonPath = path.join(__dirname, 'vercel.json');
if (fs.existsSync(vercelJsonPath)) {
  const vercelJson = JSON.parse(fs.readFileSync(vercelJsonPath, 'utf8'));
  
  // Verificar framework
  if (vercelJson.framework === 'vite') {
    log(`  ‚úÖ Framework configurado corretamente: ${vercelJson.framework}`, colors.green);
  } else {
    log(`  ‚ö†Ô∏è Framework possivelmente incorreto: ${vercelJson.framework || 'n√£o especificado'} (deveria ser "vite")`, colors.yellow);
  }
  
  // Verificar build output
  if (vercelJson.outputDirectory === 'dist') {
    log(`  ‚úÖ Diret√≥rio de sa√≠da configurado corretamente: ${vercelJson.outputDirectory}`, colors.green);
  } else {
    log(`  ‚ö†Ô∏è Diret√≥rio de sa√≠da possivelmente incorreto: ${vercelJson.outputDirectory || 'n√£o especificado'} (deveria ser "dist")`, colors.yellow);
  }
  
  // Verificar rotas
  if (vercelJson.routes) {
    log(`  ‚úÖ Rotas configuradas (${vercelJson.routes.length} regras)`, colors.green);
    
    // Verificar se h√° uma rota para lidar com SPA routing
    const hasSpaRoute = vercelJson.routes.some(route => 
      (route.src === '/(.*)'|| route.handle === 'filesystem') && route.dest === '/index.html');
    
    if (hasSpaRoute) {
      log(`  ‚úÖ Configura√ß√£o para SPA routing encontrada`, colors.green);
    } else {
      log(`  ‚ö†Ô∏è Poss√≠vel aus√™ncia de configura√ß√£o para SPA routing`, colors.yellow);
    }
  } else {
    log(`  ‚ö†Ô∏è Nenhuma configura√ß√£o de rota encontrada`, colors.yellow);
  }
} else {
  log(`  ‚ùå Arquivo vercel.json n√£o encontrado`, colors.red);
  allRequirementsMet = false;
}

// Verificar arquivos API
log('\n4. Verificando endpoints de API:', colors.cyan);

const apiDir = path.join(__dirname, 'api');
if (fs.existsSync(apiDir)) {
  const apiFiles = fs.readdirSync(apiDir).filter(file => file.endsWith('.js'));
  
  if (apiFiles.length > 0) {
    log(`  ‚úÖ ${apiFiles.length} arquivo(s) de API encontrado(s)`, colors.green);
    
    // Verificar formato das APIs
    let validApis = 0;
    apiFiles.forEach(file => {
      const content = fs.readFileSync(path.join(apiDir, file), 'utf8');
      if (content.includes('export default function handler') || content.includes('export default async function handler')) {
        validApis++;
      }
    });
    
    if (validApis === apiFiles.length) {
      log(`  ‚úÖ Todos os ${validApis} arquivo(s) de API t√™m o formato correto`, colors.green);
    } else {
      log(`  ‚ö†Ô∏è Apenas ${validApis} de ${apiFiles.length} arquivo(s) de API t√™m o formato correto`, colors.yellow);
    }
  } else {
    log(`  ‚ö†Ô∏è Nenhum arquivo de API encontrado`, colors.yellow);
  }
} else {
  log(`  ‚ùå Diret√≥rio api/ n√£o encontrado`, colors.red);
}

// Verificar conflitos de arquivos
log('\n5. Verificando conflitos de arquivos:', colors.cyan);

const rootConflicts = checkForConflicts(__dirname);
const srcConflicts = checkForConflicts(path.join(__dirname, 'src'));

if (rootConflicts.length === 0 && srcConflicts.length === 0) {
  log(`  ‚úÖ Nenhum conflito de arquivo encontrado`, colors.green);
} else {
  log(`  ‚ö†Ô∏è Poss√≠veis conflitos de arquivo encontrados:`, colors.yellow);
  
  if (rootConflicts.length > 0) {
    log(`    Na raiz do projeto:`, colors.yellow);
    rootConflicts.forEach(conflict => {
      log(`    - M√∫ltiplos arquivos com base "${conflict.base}": ${conflict.files.join(', ')}`, colors.yellow);
    });
  }
  
  if (srcConflicts.length > 0) {
    log(`    No diret√≥rio src/:`, colors.yellow);
    srcConflicts.forEach(conflict => {
      log(`    - M√∫ltiplos arquivos com base "${conflict.base}": ${conflict.files.map(f => path.relative(__dirname, f)).join(', ')}`, colors.yellow);
    });
  }
}

// Verificar index.html
log('\n6. Verificando index.html:', colors.cyan);

const indexHtmlPath = path.join(__dirname, 'index.html');
if (fs.existsSync(indexHtmlPath)) {
  const content = fs.readFileSync(indexHtmlPath, 'utf8');
  
  if (content.includes('<div id="root"></div>')) {
    log(`  ‚úÖ Elemento root encontrado no index.html`, colors.green);
  } else {
    log(`  ‚ö†Ô∏è Elemento root n√£o encontrado no index.html`, colors.yellow);
  }
  
  if (content.includes('src="/src/main.tsx"')) {
    log(`  ‚úÖ Refer√™ncia ao arquivo main.tsx encontrada`, colors.green);
  } else {
    log(`  ‚ö†Ô∏è Refer√™ncia ao arquivo main.tsx n√£o encontrada ou em formato diferente`, colors.yellow);
  }
} else {
  log(`  ‚ùå Arquivo index.html n√£o encontrado`, colors.red);
}

// Resumo
log('\nüìã Resumo da verifica√ß√£o:', colors.bold);

if (allRequirementsMet) {
  log(`  ‚úÖ Todos os requisitos b√°sicos para deploy no Vercel est√£o atendidos!`, colors.green);
  log(`  üöÄ Sua aplica√ß√£o est√° pronta para deploy.`, colors.green);
} else {
  log(`  ‚ö†Ô∏è H√° problemas que precisam ser resolvidos antes do deploy.`, colors.yellow);
  log(`  üìù Revise os itens marcados com ‚ùå acima e corrija-os.`, colors.yellow);
}

log(`\nüí° Pr√≥ximos passos:`, colors.cyan);
log(`  1. Execute node prepare-build.js para garantir que todos os arquivos estejam nos locais corretos`);
log(`  2. Fa√ßa o commit das altera√ß√µes para o reposit√≥rio Git`);
log(`  3. Configure o projeto no Vercel com as vari√°veis de ambiente necess√°rias:`);
log(`     - VITE_SUPABASE_URL`);
log(`     - VITE_SUPABASE_ANON_KEY`);
log(`  4. Inicie o deploy no Vercel`);