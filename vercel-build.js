// Este script √© executado pela Vercel durante o processo de deploy
// Ele garante que a aplica√ß√£o seja constru√≠da como um frontend React com Vite
// em vez de uma aplica√ß√£o Node.js

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üöÄ Iniciando o build especializado para a Vercel');

// Usa a configura√ß√£o de Vite espec√≠fica para frontend
console.log('üì¶ Construindo o frontend React com Vite');
execSync('npx vite build --config vite.frontend.config.ts', { stdio: 'inherit' });

// Garante que o arquivo index.html esteja na raiz do diret√≥rio dist
// (O Vercel espera isso para sites est√°ticos)
const distDir = path.resolve('./dist');
const distPublicDir = path.resolve('./dist/public');

console.log('üîç Verificando arquivos est√°ticos na pasta dist');

// Se a pasta dist/public existe, move seu conte√∫do para dist
if (fs.existsSync(distPublicDir) && fs.statSync(distPublicDir).isDirectory()) {
  console.log('üìÇ Movendo arquivos de dist/public para dist');
  
  // Lista todos os arquivos em dist/public
  const files = fs.readdirSync(distPublicDir);
  
  // Move cada arquivo para dist
  files.forEach(file => {
    const srcPath = path.join(distPublicDir, file);
    const destPath = path.join(distDir, file);
    
    if (fs.existsSync(destPath)) {
      fs.rmSync(destPath, { recursive: true, force: true });
    }
    
    fs.renameSync(srcPath, destPath);
    console.log(`  ‚úì Movido: ${file}`);
  });
  
  // Remove a pasta dist/public vazia
  fs.rmdirSync(distPublicDir);
}

// Verifica se index.html existe na raiz de dist
if (!fs.existsSync(path.join(distDir, 'index.html'))) {
  console.error('‚ùå Erro: index.html n√£o encontrado na pasta dist');
  process.exit(1);
} else {
  console.log('‚úÖ index.html encontrado na raiz da pasta dist');
}

console.log('üéâ Build para Vercel conclu√≠do com sucesso!');